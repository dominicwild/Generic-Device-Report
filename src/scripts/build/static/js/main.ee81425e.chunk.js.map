{"version":3,"sources":["SVG/Carat.jsx","components/Datatable.jsx","components/ButtonPanel.jsx","components/OverviewPanel.jsx","components/Overview.jsx","components/ReportData.jsx","components/Report.jsx","components/GlobalSearch.jsx","App.js","serviceWorker.js","index.js"],"names":["Carat","version","x","y","viewBox","enableBackground","d","fill","Component","pdfMake","vfs","pdfFonts","window","JSZip","jsZip","$","DataTable","require","Datatable","props","componentDidMount","data","config","id","options","paging","length","dom","title","buttons","extend","orientation","pageSize","dateFormat","fn","dataTable","moment","element","document","querySelector","closest","addEventListener","setHeight","querySelectorAll","forEach","item","select","e","makeFooter","columns","map","col","key","Name","onClick","dataTableContainer","target","classList","contains","remove","add","state","this","className","Math","random","replace","style","row","index","val","Value","function","err","console","log","error","ButtonPanel","expandAll","click","collapseAll","href","OverviewPanel","panel","rows","modify","Literal","Overview","Object","keys","ReportData","tables","Tables","table","replaceAll","Array","isArray","Report","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ee81425e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Carat extends Component {\r\n  render() {\r\n    return (\r\n      <svg\r\n        version=\"1.1\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        viewBox=\"0 0 1000 1000\"\r\n        enableBackground=\"new 0 0 1000 1000\"\r\n      >\r\n        <g>\r\n          <path d=\"M843,181.5l-343,343l-343-343l-147,147l490,490l490-490L843,181.5z\" fill=\"white\" />\r\n        </g>\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Carat;\r\n","import React, { Component } from \"react\";\r\nimport SVG from \"react-inlinesvg\";\r\nimport $ from \"jquery\";\r\nimport \"datatables.net-dt/css/jquery.dataTables.css\";\r\nimport \"../css/Datatable.css\";\r\nimport \"moment/min/moment.min.js\";\r\nimport \"datetime-moment/datetime-moment.js\";\r\nimport Carat from \"../SVG/Carat\";\r\nimport jsZip from \"jszip\";\r\nimport \"datatables.net-buttons/js/buttons.colVis.min\";\r\nimport \"datatables.net-buttons/js/dataTables.buttons.min\";\r\nimport \"datatables.net-buttons/js/buttons.flash.min\";\r\nimport \"datatables.net-buttons/js/buttons.html5.min\";\r\n\r\nimport pdfMake from \"pdfmake/build/pdfmake\";\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nwindow.JSZip = jsZip;\r\n\r\n$.DataTable = require(\"datatables.net\");\r\n\r\nrequire(\"datatables.net-keytable-dt\");\r\nrequire(\"datatables.net-searchpanes-dt\");\r\n\r\nclass Datatable extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { data, config, id } = this.props;\r\n    const paging = (data.length > 15) | config?.paging;\r\n\r\n    let options = {\r\n      paging,\r\n      dom: '<\"top\"iBf>rt<\"bottom\"lp><\"clear\">',\r\n    };\r\n\r\n    if (config) {\r\n      options = { ...options, ...config };\r\n    }\r\n    const title = `Device Report - ${id}`;\r\n\r\n    $(`#${id}`).DataTable({\r\n      ...options,\r\n      buttons: [\r\n        \"copyHtml5\",\r\n        {\r\n          extend: \"pdfHtml5\",\r\n          orientation: \"landscape\",\r\n          pageSize: \"LEGAL\",\r\n          title,\r\n        },\r\n        {\r\n          extend: \"excelHtml5\",\r\n          title,\r\n        },\r\n        {\r\n          extend: \"csvHtml5\",\r\n          title,\r\n        },\r\n      ],\r\n    });\r\n\r\n    if (config?.dateFormat) {\r\n      $.fn.dataTable.moment(config.dateFormat);\r\n      // $(`#${this.props.id}`).DataTable.moment(config.dateFormat);\r\n    }\r\n\r\n    const element = document.querySelector(`#${id}`).closest(\".transition-container\");\r\n    // element.style.maxHeight = element.scrollHeight + \"px\";\r\n    element.addEventListener(\"onclick\", this.setHeight);\r\n    element.querySelectorAll(\".paginate_button\").forEach((item) => {\r\n      item.addEventListener(\"onclick\", this.setHeight);\r\n    });\r\n\r\n    const select = document.querySelector(`#${id}_wrapper select[name=\"${id}_length\"]`);\r\n    if (select) {\r\n      select.addEventListener(\"onchange\", (e) => {\r\n        // element.style.maxHeight = element.scrollHeight + \"px\";\r\n      });\r\n    }\r\n  };\r\n\r\n  makeFooter = () => {\r\n    const { data, columns, id } = this.props;\r\n    if (data.length > 15) {\r\n      return (\r\n        <tfoot>\r\n          <tr>\r\n            {columns.map((col) => {\r\n              return <th key={`${id}${col.Name}bottom}}`}>{col.Name}</th>;\r\n            })}\r\n          </tr>\r\n        </tfoot>\r\n      );\r\n    }\r\n  };\r\n\r\n  onClick = (e) => {\r\n    const dataTableContainer = e.target.closest(\".datatable-container\");\r\n    const target = dataTableContainer.querySelector(\".transition-container\");\r\n    if (!dataTableContainer.classList.contains(\"hidden\")) {\r\n      dataTableContainer.classList.add(\"hidden\");\r\n      e.target.classList.add(\"hidden\");\r\n    } else {\r\n      dataTableContainer.classList.remove(\"hidden\");\r\n      e.target.classList.remove(\"hidden\");\r\n    }\r\n  };\r\n\r\n  setHeight = (e) => {\r\n    const { id } = this.props;\r\n    const element = document.querySelector(`#${id}`).closest(\".transition-container\");\r\n    // element.style.maxHeight = element.scrollHeight + \"px\";\r\n  };\r\n\r\n  render() {\r\n    const { data, columns, id, title, config } = this.props;\r\n\r\n    return (\r\n      <div className=\"datatable-container\">\r\n        <h1 onClick={this.onClick} className=\"collapsable\">\r\n          <span className=\"title\">{title}</span>\r\n          <div className=\"expand-icon\">\r\n            <Carat />\r\n          </div>\r\n        </h1>\r\n        <div className={`transition-container`}>\r\n          <div className={`datatable-table`}>\r\n            <table id={id} className=\"display\">\r\n              <thead>\r\n                <tr>\r\n                  {columns.map((col) => {\r\n                    return (\r\n                      <th key={`${id}${col.Name}top}}${Math.random()}`} className={col.Name.replace(\" \", \"-\")} style={col.style}>\r\n                        {col.Name}\r\n                      </th>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {data.map((row, index) => {\r\n                  return (\r\n                    <tr key={`${id}${index}row}}${Math.random()}`}>\r\n                      {columns.map((col) => {\r\n                        let val = row[col.Value];\r\n                        if (col.function) {\r\n                          try {\r\n                            val = col.function(val, row);\r\n                          } catch (err) {\r\n                            console.log(\"Exception thrown that caused unknown value error.\");\r\n                            console.error(err);\r\n                            val = \"Unknown\";\r\n                          }\r\n                        }\r\n                        if (val == null) {\r\n                          val = \"Unknown\";\r\n                        }\r\n                        return <td key={`${id}${col.Name}${val}val}}${Math.random()}`}>{val}</td>;\r\n                      })}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n              {this.makeFooter()}\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Datatable;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/Button.css\";\r\nimport \"../css/ButtonPanel.css\";\r\n\r\nclass ButtonPanel extends Component {\r\n  expandAll = () => {\r\n    document.querySelectorAll(\".hidden\").forEach((element) => {\r\n      element.click();\r\n    });\r\n  };\r\n\r\n  collapseAll = () => {\r\n    document.querySelectorAll(\".collapsable\").forEach((element) => {\r\n      if (!element.classList.contains(\"hidden\")) {\r\n        element.click();\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"expand-panel\">\r\n        <a className=\"button gpo-btn\" href=\"gpo.html\" target=\"_blank\">\r\n          GPO Report\r\n        </a>\r\n        <a className=\"button expand-btn\" onClick={this.expandAll}>\r\n          Expand All\r\n        </a>\r\n        <a className=\"button collapse-btn\" onClick={this.collapseAll}>\r\n          Collapse All\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ButtonPanel;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/OverviewPanel.css\";\r\n\r\nclass OverviewPanel extends Component {\r\n  render() {\r\n    const { panel } = this.props;\r\n    if (!panel.rows) {\r\n      return <></>;\r\n    }\r\n    return (\r\n      <div className=\"overview-panel\">\r\n        <div className=\"title\">\r\n          <h1>{panel.title}</h1>\r\n        </div>\r\n        <div className=\"content\">\r\n          <table>\r\n            <tbody>\r\n              {panel.rows.map(({ Name, Value, modify, Literal }) => {\r\n                if (!Literal) {\r\n                  Value = panel.data[Value];\r\n                  if (modify) {\r\n                    try {\r\n                      Value = modify(Value, panel.data);\r\n                    } catch (err) {\r\n                      console.error(err);\r\n                      Value = \"Unknown\";\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (\"\" + Value === \"true\") {\r\n                  Value = \"true ✔️\";\r\n                }\r\n                if (\"\" + Value === \"false\") {\r\n                  Value = \"false ❌\";\r\n                }\r\n\r\n                if (Value === null) {\r\n                  Value = \"Unknown\";\r\n                }\r\n                \r\n                return (\r\n                  <tr key={`${Name}${Value}`} className=\"row\">\r\n                    <td className=\"key\">{Name}</td>\r\n                    <td className=\"value\">{\"\" + Value}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OverviewPanel;\r\n","import React, { Component } from \"react\";\r\nimport OverviewPanel from \"./OverviewPanel\";\r\nimport \"../css/Overview.css\";\r\n\r\nclass Overview extends Component {\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    return (\r\n      <div className=\"overview\">\r\n        {data.map((panel) => {\r\n          if (panel.data && Object.keys(panel.data).length != 0) {\r\n            return <OverviewPanel panel={panel} key={panel.title} />;\r\n          }\r\n        })}\r\n        {/* <OverviewPanel panel={data[0]} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Overview;\r\n","import React, { Component } from \"react\";\r\nimport Datatable from \"./Datatable\";\r\nimport \"../css/ReportData.css\";\r\n\r\nclass ReportData extends Component {\r\n  render() {\r\n    const tables = window.config.Tables;\r\n\r\n    return (\r\n      <div className=\"report-data\">\r\n        {tables.map((table) => {\r\n          const id = table.title.replaceAll(\" \", \"-\").replaceAll(\"(\", \"\").replaceAll(\")\", \"\");\r\n\r\n          if(table.data && !Array.isArray(table.data)){\r\n            table.data = [table.data]\r\n          }\r\n\r\n          if (table.data && Object.keys(table.data).length != 0 && table.data.map != null) {\r\n            return (\r\n              <Datatable config={table.options} data={table.data} columns={table.columns} title={table.title} id={id} key={`${table.title}table}}`} />\r\n            );\r\n          }\r\n          return \"\";\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReportData;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/Report.css\";\r\nimport Datatable from \"./Datatable\";\r\nimport ButtonPanel from \"./ButtonPanel\";\r\nimport Overview from \"./Overview\";\r\nimport ReportData from \"./ReportData\";\r\nimport GlobalSearch from \"./GlobalSearch\";\r\n\r\n\r\nconst config = window.config;\r\n\r\nclass Report extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"report\">\r\n        <div className=\"header\">System Report</div>\r\n        <div className=\"body\">\r\n          <Overview data={config.Overview} />\r\n          <ButtonPanel />\r\n          {/* <GlobalSearch /> */}\r\n          <ReportData />\r\n        </div>\r\n\r\n        {/* <div className=\"footer\"></div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Report;\r\n","import React, { Component } from 'react';\r\n\r\nclass GlobalSearch extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            search: \"\"\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const newSearch = e.target.value;\r\n        let allSearch = document.querySelectorAll(\"div.dataTables_filter label input[type='search']\")\r\n        this.setState({\r\n            search: newSearch\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {search} = this.state\r\n        return (\r\n            <div className=\"global-search\">\r\n                <input type=\"text\" name=\"global-search\" id=\"globalSearch\" value={search} onChange={this.onChange}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GlobalSearch;","import React from 'react';\nimport Report from './components/Report';\n\n// var $  = require( 'jquery' );\n// var dt = require( 'datatables.net' )( window, $ );\n\n// require( 'jszip' );\n// require( 'pdfmake' );\n// require( 'datatables.net-dt' )();\n// require( 'datatables.net-buttons-dt' )();\n// require( 'datatables.net-buttons/js/buttons.html5.js' )();\n// // require( 'datatables.net-keytable-dt' )();\n// require( 'datatables.net-searchpanes-dt' )();\n\nfunction App() {\n  return (\n    <Report />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}