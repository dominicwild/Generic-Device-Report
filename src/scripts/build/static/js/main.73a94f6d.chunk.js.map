{"version":3,"sources":["SVG/Carat.jsx","components/Datatable.jsx","components/ExpandPanel.jsx","components/OverviewPanel.jsx","components/Overview.jsx","components/ReportData.jsx","components/Report.jsx","App.js","serviceWorker.js","index.js"],"names":["Carat","version","x","y","viewBox","enable-background","d","fill","Component","$","DataTable","require","Datatable","props","componentDidMount","data","config","id","options","paging","length","dom","dateFormat","element","document","querySelector","closest","addEventListener","setHeight","querySelectorAll","forEach","item","select","e","makeFooter","columns","map","col","key","Name","onClick","dataTableContainer","target","classList","contains","remove","add","state","this","title","console","log","className","Math","random","replace","style","row","index","val","Value","function","ExpandPanel","expandAll","click","collapseAll","OverviewPanel","panel","Overview","ReportData","tables","window","Tables","table","replaceAll","Report","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73a94f6d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Carat extends Component {\r\n  render() {\r\n    return (\r\n      <svg\r\n        version=\"1.1\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        viewBox=\"0 0 1000 1000\"\r\n        enable-background=\"new 0 0 1000 1000\"\r\n      >\r\n        <g>\r\n          <path d=\"M843,181.5l-343,343l-343-343l-147,147l490,490l490-490L843,181.5z\" fill=\"white\" />\r\n        </g>\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Carat;\r\n","import React, { Component } from \"react\";\r\nimport SVG from \"react-inlinesvg\";\r\nimport $ from \"jquery\";\r\nimport \"datatables.net-dt/css/jquery.dataTables.css\";\r\nimport \"../css/Datatable.css\";\r\nimport \"moment\";\r\nimport \"datetime-moment\";\r\nimport Carat from \"../SVG/Carat\";\r\n\r\n$.DataTable = require(\"datatables.net\");\r\n\r\nclass Datatable extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { data, config, id } = this.props;\r\n    const paging = (data.length > 15) | config?.paging;\r\n\r\n    let options = {\r\n      paging,\r\n      dom: '<\"top\"if>rt<\"bottom\"lp><\"clear\">',\r\n    };\r\n\r\n    if (config) {\r\n      options = { ...options, ...config };\r\n    }\r\n\r\n    $(`#${id}`).DataTable({\r\n      ...options,\r\n    });\r\n\r\n    if (config?.dateFormat) {\r\n      // $(`#${this.props.id}`).DataTable.moment(config.dateFormat);\r\n    }\r\n\r\n    const element = document.querySelector(`#${id}`).closest(\".transition-container\");\r\n    // element.style.maxHeight = element.scrollHeight + \"px\";\r\n    element.addEventListener(\"onclick\", this.setHeight);\r\n    element.querySelectorAll(\".paginate_button\").forEach((item) => {\r\n      item.addEventListener(\"onclick\", this.setHeight);\r\n    });\r\n\r\n    const select = document.querySelector(`#${id}_wrapper select[name=\"${id}_length\"]`);\r\n    if (select) {\r\n      select.addEventListener(\"onchange\", (e) => {\r\n        // element.style.maxHeight = element.scrollHeight + \"px\";\r\n      });\r\n    }\r\n  };\r\n\r\n  makeFooter = () => {\r\n    const { data, columns, id } = this.props;\r\n    if (data.length > 15) {\r\n      return (\r\n        <tfoot>\r\n          <tr>\r\n            {columns.map((col) => {\r\n              return <th key={`${id}${col.Name}bottom}}`}>{col.Name}</th>;\r\n            })}\r\n          </tr>\r\n        </tfoot>\r\n      );\r\n    }\r\n  };\r\n\r\n  onClick = (e) => {\r\n    const dataTableContainer = e.target.closest(\".datatable-container\");\r\n    const target = dataTableContainer.querySelector(\".transition-container\");\r\n    if (!dataTableContainer.classList.contains(\"hidden\")) {\r\n      dataTableContainer.classList.add(\"hidden\");\r\n      e.target.classList.add(\"hidden\");\r\n    } else {\r\n      dataTableContainer.classList.remove(\"hidden\");\r\n      e.target.classList.remove(\"hidden\");\r\n    }\r\n  };\r\n\r\n  setHeight = (e) => {\r\n    const { id } = this.props;\r\n    const element = document.querySelector(`#${id}`).closest(\".transition-container\");\r\n    // element.style.maxHeight = element.scrollHeight + \"px\";\r\n  };\r\n\r\n  render() {\r\n    const { data, columns, id, title, config } = this.props;\r\n    console.log(data);\r\n    // console.log(columns);\r\n\r\n    return (\r\n      <div className=\"datatable-container\">\r\n        <h1 onClick={this.onClick} className=\"collapsable\">\r\n          <span className=\"title\">{title}</span>\r\n          <div className=\"expand-icon\">\r\n            <Carat />\r\n          </div>\r\n        </h1>\r\n        <div className={`transition-container`}>\r\n          <div className={`datatable-table`}>\r\n            <table id={id} className=\"display\">\r\n              <thead>\r\n                <tr>\r\n                  {columns.map((col) => {\r\n                    return (\r\n                      <th key={`${id}${col.Name}top}}${Math.random()}`} className={col.Name.replace(\" \", \"-\")} style={col.style}>\r\n                        {col.Name}\r\n                      </th>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {data.map((row, index) => {\r\n                  return (\r\n                    <tr key={`${id}${index}row}}${Math.random()}`}>\r\n                      {columns.map((col) => {\r\n                        let val = row[col.Value];\r\n                        if (col.function) {\r\n                          val = col.function(val, row);\r\n                        }\r\n                        if (val == null) {\r\n                          val = \"Unknown\";\r\n                        }\r\n                        return <td key={`${id}${col.Name}${val}val}}${Math.random()}`}>{val}</td>;\r\n                      })}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n              {this.makeFooter()}\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Datatable;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/Button.css\";\r\nimport \"../css/ExpandPanel.css\";\r\n\r\nclass ExpandPanel extends Component {\r\n  expandAll = () => {\r\n    document.querySelectorAll(\".hidden\").forEach((element) => {\r\n      element.click();\r\n    });\r\n  };\r\n\r\n  collapseAll = () => {\r\n    document.querySelectorAll(\".collapsable\").forEach((element) => {\r\n      if (!element.classList.contains(\"hidden\")) {\r\n        element.click();\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"expand-panel\">\r\n        <a className=\"button expand-btn\" onClick={this.expandAll}>\r\n          Expand All\r\n        </a>\r\n        <a className=\"button collapse-btn\" onClick={this.collapseAll}>\r\n          Collapse All\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExpandPanel;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/OverviewPanel.css\";\r\n\r\nclass OverviewPanel extends Component {\r\n  render() {\r\n    const { panel } = this.props;\r\n    return (\r\n      <div className=\"overview-panel\">\r\n        <div className=\"title\">\r\n          <h1>{panel.title}</h1>\r\n        </div>\r\n        <div className=\"content\">\r\n          <table>\r\n            <tbody>\r\n              {panel.data.map(({ Name, Value }) => {\r\n                return (\r\n                  <tr key={`${Name}${Value}`} className=\"row\">\r\n                    <td className=\"key\">{Name}</td>\r\n                    <td className=\"value\">{\"\" + Value}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OverviewPanel;\r\n","import React, { Component } from \"react\";\r\nimport OverviewPanel from \"./OverviewPanel\";\r\nimport \"../css/Overview.css\"\r\n\r\nclass Overview extends Component {\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    return (\r\n      <div className=\"overview\">\r\n        {data.map((panel) => {\r\n          return <OverviewPanel panel={panel} key={panel.title}/>;\r\n        })}\r\n        {/* <OverviewPanel panel={data[0]} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Overview;\r\n","import React, { Component } from \"react\";\r\nimport Datatable from \"./Datatable\";\r\nimport \"../css/ReportData.css\"\r\n\r\nclass ReportData extends Component {\r\n  render() {\r\n    const tables = window.config.Tables;\r\n\r\n    return (\r\n      <div className=\"report-data\">\r\n        {tables.map((table) => {\r\n          const id = table.title.replaceAll(\" \", \"-\").replaceAll(\"(\", \"\").replaceAll(\")\", \"\")\r\n          if(table.data.map != null){\r\n            return <Datatable config={table.options} data={table.data} columns={table.columns} title={table.title} id={id} key={`${table.title}table}}`}/>;\r\n          }\r\n          return \"\";\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReportData;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/Report.css\";\r\nimport Datatable from \"./Datatable\";\r\nimport ExpandPanel from \"./ExpandPanel\";\r\nimport Overview from \"./Overview\";\r\nimport ReportData from \"./ReportData\";\r\n\r\nconst config = window.config;\r\n\r\nclass Report extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"report\">\r\n        <div className=\"header\">System Report</div>\r\n        <div className=\"body\">\r\n          <Overview data={config.Overview} />\r\n          <ExpandPanel />\r\n          <ReportData />\r\n        </div>\r\n\r\n        {/* <div className=\"footer\"></div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Report;\r\n","import React from 'react';\nimport Report from './components/Report';\n\nfunction App() {\n  return (\n    <Report />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}